/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.suslsport.sportmgtsystem.view;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.suslsport.sportmgtsystem.ThirdPartyFn.ComboSearch;
import org.suslsport.sportmgtsystem.controller.CurrentStockContrller;
import org.suslsport.sportmgtsystem.controller.InventoryController;
import org.suslsport.sportmgtsystem.controller.ItemController;
import org.suslsport.sportmgtsystem.controller.OnHandQuantityContrller;
import org.suslsport.sportmgtsystem.model.CurrentStock;
import org.suslsport.sportmgtsystem.model.OnHandQuantity;
import sun.java2d.pipe.DrawImage;

/**
 *
 * @author RedHunter
 */
public class AddCurrentStock extends javax.swing.JPanel {

    Main aThis = null;

    /**
     * Creates new form AddCurrentStock
     */
    String stockId = null;
    int quan = 0;
    int newQuantity = 0;
    AddInventory addInventory = null;
    private String vId = null;

    AddCurrentStock(Main aThis, AddInventory addInventory, String vId) {

        initComponents();
        this.vId = vId;
        this.aThis = aThis;
        this.addInventory = addInventory;
        ComboSearch comboSearch = new ComboSearch();

        jCombo_Voucher_id.addItem(vId);

        comboSearch.setSearchableCombo(jCombo_Voucher_id, true, "");
        try {
            loadDataToItem();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadVoucherId() throws ClassNotFoundException, SQLException {
        ArrayList<String> allVoucherId = InventoryController.getAllVoucherId();
        for (String string : allVoucherId) {
            jCombo_Voucher_id.addItem(string);
        }
    }

    public void loadDataToItem() throws ClassNotFoundException, SQLException {
        ComboSearch comboSearch1 = new ComboSearch();
        jComboBox_ItemName.removeAllItems();
        jComboBox_ItemName.addItem("Select an equipment name");
        ArrayList<String> allItemName = ItemController.getAllItemName();
        for (String string : allItemName) {
            jComboBox_ItemName.addItem(string);

        }
        comboSearch1.setSearchableCombo(jComboBox_ItemName, true, "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jText_quantity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton_Add_Inventory = new javax.swing.JButton();
        jCombo_Voucher_id = new javax.swing.JComboBox<>();
        jComboBox_ItemName = new javax.swing.JComboBox<>();
        jLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Voucher Id                              :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Item Name                              :");

        jText_quantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jText_quantity.setToolTipText("Enter an quantity");
        jText_quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jText_quantityActionPerformed(evt);
            }
        });
        jText_quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jText_quantityKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jText_quantityKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Quantity                                 :");

        jButton_Add_Inventory.setBackground(new java.awt.Color(0, 153, 255));
        jButton_Add_Inventory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_Add_Inventory.setText("Add Stock");
        jButton_Add_Inventory.setToolTipText("Add this equipment to relevant voucher");
        jButton_Add_Inventory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Add_Inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_InventoryActionPerformed(evt);
            }
        });

        jCombo_Voucher_id.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCombo_Voucher_id.setToolTipText("Voucher Id");
        jCombo_Voucher_id.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCombo_Voucher_idFocusLost(evt);
            }
        });
        jCombo_Voucher_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombo_Voucher_idActionPerformed(evt);
            }
        });

        jComboBox_ItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_ItemName.setToolTipText("Select an equipment name");
        jComboBox_ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ItemNameActionPerformed(evt);
            }
        });

        jLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel.setText("Add Current Stock");

        jButton1.setBackground(new java.awt.Color(255, 102, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(441, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(6, 6, 6)
                            .addComponent(jText_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton_Add_Inventory, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(jCombo_Voucher_id, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(6, 6, 6)
                            .addComponent(jComboBox_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel, javax.swing.GroupLayout.Alignment.CENTER))
                .addContainerGap(478, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox_ItemName, jCombo_Voucher_id, jText_quantity});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCombo_Voucher_id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jText_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_Add_Inventory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel5});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton_Add_Inventory});

    }// </editor-fold>//GEN-END:initComponents

    private void jButton_Add_InventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_InventoryActionPerformed
        if (jComboBox_ItemName.getSelectedIndex() > 0) {

            // TODO add your handling code here:
            String voucherId = jCombo_Voucher_id.getSelectedItem().toString();
            String itemName = jComboBox_ItemName.getSelectedItem().toString();
            String relevantItemId = null;
            try {
                relevantItemId = ItemController.getRelevantItemId(itemName);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
            }
            stockId = voucherId + "" + relevantItemId;

            String quantity = jText_quantity.getText();
            if (!voucherId.equals("") && !itemName.equals("") && !quantity.equals("")) {
                
                    int q = Integer.parseInt(quantity);
                    // System.out.println(q);

                    boolean checkAddRow = false;
                try {
                    checkAddRow = OnHandQuantityContrller.checkAddRow(relevantItemId);
                } catch (SQLException ex) {
                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                }

                    if (checkAddRow) {
                        ResultSet checkRow = null;
                        try {
                            checkRow = OnHandQuantityContrller.checkRow(relevantItemId);
                        } catch (SQLException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            if (checkRow.last()) {
                                String s = checkRow.getString(2);
                                newQuantity = Integer.parseInt(s);
                                //System.out.println(newQuantity);
                                quan = q + newQuantity;
                                System.out.println(quan);
                                OnHandQuantity handQ = new OnHandQuantity(relevantItemId, quan);
                                try {
                                    boolean updateRow = OnHandQuantityContrller.updateRow(handQ);
                                } catch (ClassNotFoundException ex) {
                                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SQLException ex) {
                                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                
                            } else {
                                
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } else {
                        OnHandQuantity handQuanad = new OnHandQuantity(relevantItemId, q);

                        try {
                            OnHandQuantityContrller.addRow(handQuanad);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    CurrentStock cs = new CurrentStock(stockId, voucherId, relevantItemId, q);
                    boolean addCurrentStock = false;
                try {
                    addCurrentStock = CurrentStockContrller.addCurrentStock(cs);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                }
                    if (addCurrentStock) {
                        try {
                            loadDataToItem();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(AddCurrentStock.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        jText_quantity.setText("");
                        JOptionPane.showMessageDialog(this, "Stock added successfully");
                    } else {
                        JOptionPane.showMessageDialog(this, "Error in adding stock");
                    }

                

            }else{
                JOptionPane.showMessageDialog(null, "Please check fields again", "Warnning", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a equipment name", "Warnning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jButton_Add_InventoryActionPerformed

    private void jCombo_Voucher_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombo_Voucher_idActionPerformed


    }//GEN-LAST:event_jCombo_Voucher_idActionPerformed

    private void jComboBox_ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ItemNameActionPerformed


    }//GEN-LAST:event_jComboBox_ItemNameActionPerformed

    private void jCombo_Voucher_idFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCombo_Voucher_idFocusLost


    }//GEN-LAST:event_jCombo_Voucher_idFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addInventory.acs = null;

        aThis.getjPanel_Manage_Inventory().setVisible(true);

        this.setVisible(false);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jText_quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jText_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jText_quantityActionPerformed

    private void jText_quantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jText_quantityKeyPressed
        // TODO add your handling code here:
        setNumericOnly(jText_quantity);

    }//GEN-LAST:event_jText_quantityKeyPressed

    private void jText_quantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jText_quantityKeyTyped
        // TODO add your handling code here:
        checkCharacter(jText_quantity);
    }//GEN-LAST:event_jText_quantityKeyTyped
    public static void setNumericOnly(JTextField jTextField) {
        jTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();

                if ((!Character.isDigit(c)
                        || (c == KeyEvent.VK_BACK_SPACE)
                        || (c == KeyEvent.VK_DELETE))) {
                    e.consume();
                }
            }
        });
    }

    public static void checkCharacter(JTextField jTextField) {

        jTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (jTextField.getText().length() >= 4) // limit textfield to 3 characters
                {
                    e.consume();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_Add_Inventory;
    private javax.swing.JComboBox<String> jComboBox_ItemName;
    private javax.swing.JComboBox<String> jCombo_Voucher_id;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jText_quantity;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the vId
     */
    public String getvId() {
        return vId;
    }

    /**
     * @param vId the vId to set
     */
    public void setvId(String vId) {
        this.vId = vId;
    }

}
